package com.tpinf4067.sale_vehicle.service;

import com.tpinf4067.sale_vehicle.domain.Cart;
import com.tpinf4067.sale_vehicle.domain.CartItem;
import com.tpinf4067.sale_vehicle.domain.Vehicle;
import com.tpinf4067.sale_vehicle.patterns.auth.User;
import com.tpinf4067.sale_vehicle.patterns.customer.Customer;
import com.tpinf4067.sale_vehicle.patterns.document.*;
import com.tpinf4067.sale_vehicle.patterns.order.factory.*;
import com.tpinf4067.sale_vehicle.patterns.order.state.*;
import com.tpinf4067.sale_vehicle.patterns.payment.PaymentStatus;
import com.tpinf4067.sale_vehicle.patterns.order.observer.EmailOrderNotifier;
import com.tpinf4067.sale_vehicle.patterns.order.observer.OrderNotifier;
import com.tpinf4067.sale_vehicle.repository.CustomerRepository;
import com.tpinf4067.sale_vehicle.repository.OrderRepository;
import com.tpinf4067.sale_vehicle.repository.PaymentRepository;
import com.tpinf4067.sale_vehicle.repository.VehicleRepository;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.List;

@Service
public class OrderService {

    private final OrderRepository orderRepository;
    private final VehicleRepository vehicleRepository;
    private final PDFDocumentAdapter pdfAdapter;
    private final OrderNotifier orderNotifier;
    private final CartService cartService;
    private final PaymentRepository paymentRepository;

    public OrderService(OrderRepository orderRepository, VehicleRepository vehicleRepository,
                        CustomerRepository customerRepository, CartService cartService, PaymentRepository paymentRepository) {
        this.orderRepository = orderRepository;
        this.vehicleRepository = vehicleRepository;
        this.pdfAdapter = new PDFDocumentAdapter();
        this.orderNotifier = new OrderNotifier();
        this.cartService = cartService;
        this.paymentRepository = paymentRepository;
    }

    // ‚úÖ Cr√©ation d'une commande depuis le panier SANS g√©n√©rer les documents
    public Order createOrderFromCart(Long customerId) {
        Cart cart = cartService.getCartForCustomer(customerId);

        if (cart.getItems().isEmpty()) {
            throw new IllegalStateException("Le panier est vide, impossible de passer une commande !");
        }

        // ‚úÖ V√©rification : Le client ne peut pas passer une nouvelle commande s'il en a une en attente de paiement
        boolean hasUnpaidOrder = orderRepository.findByCustomerId(customerId)
                .stream()
                .anyMatch(order -> !paymentRepository.existsByOrderAndStatus(order, PaymentStatus.PAYE));

        if (hasUnpaidOrder) {
            throw new IllegalStateException("‚ùå Vous avez une commande en attente de paiement. Veuillez d'abord la payer avant d'en cr√©er une nouvelle.");
        }

        // V√©rification du type de paiement
        // PaymentType paymentType;
        // try {
        //     paymentType = PaymentType.valueOf(paymentTypeStr.toUpperCase());
        // } catch (IllegalArgumentException e) {
        //     throw new IllegalArgumentException("Type de paiement invalide : " + paymentTypeStr);
        // } 

        //Factory Method pour cr√©er la commande
        OrderFactory orderFactory = //(paymentType == PaymentType.COMPTANT) ? 
        //                             new ComptantOrderFactory() : 
                                    new CreditOrderFactory();

        Order order = orderFactory.createOrder(cart);//, paymentType);
        order.setCustomer(cart.getCustomer());
        order.setState(new PendingState()); // ‚úÖ Commande en attente
        order.setDateDeCommande(new Date());

        for (CartItem item : cart.getItems()) {
            order.addVehicleWithOptions(item.getVehicle(), item.getOptions(), item.getQuantity());

            Vehicle vehicle = item.getVehicle();
            if (vehicle.getStockQuantity() < item.getQuantity()) {
                throw new IllegalStateException("Le v√©hicule " + vehicle.getName() + " n'a pas assez de stock !");
            }
            vehicle.setStockQuantity(vehicle.getStockQuantity() - item.getQuantity());
            vehicleRepository.save(vehicle);
        }

        Order savedOrder = orderRepository.save(order);
        cartService.clearCart(customerId);
        
        // üî• **Ne pas g√©n√©rer les documents imm√©diatement**  
        orderNotifier.addObserver(new EmailOrderNotifier(cart.getCustomer().getEmail()));
        orderNotifier.notifyObservers("Votre commande est cr√©√©e et en attente de confirmation.");
        
        return savedOrder;
    }

    // ‚úÖ G√©n√©ration des documents UNIQUEMENT apr√®s confirmation
    private void generateOrderDocuments(Order order) {
        String orderId = String.valueOf(order.getId()); // ‚úÖ ID unique pour chaque commande

        System.out.println("üìÑ Construction des documents pour la commande #" + orderId);

        // üî• R√©initialisation des documents pour √©viter l'accumulation d'anciens fichiers
        DocumentLiasseSingleton.getInstance().clearDocuments();

        OrderDocumentBuilder builder = new OrderDocumentBuilder();
        builder.constructOrderDocuments(order);

        // ‚úÖ V√©rifier si des documents ont √©t√© cr√©√©s
        List<Document> documents = DocumentLiasseSingleton.getInstance().getDocuments();
        if (documents.isEmpty()) {
            System.out.println("‚ö†Ô∏è Aucun document cr√©√© pour la commande #" + orderId);
            return;
        }

        // üî• Associer les documents √† la commande et les sauvegarder
        for (Document document : documents) {
            String formattedTitle = document.getTitle() + " - Commande #" + orderId;
            String fileName = formattedTitle.replace(" ", "_").replace("'", "") + ".pdf"; // ‚úÖ Nettoyage du nom de fichier

            document.setTitle(formattedTitle);
            document.setFilename(fileName); // ‚úÖ Ajoute le nom du fichier
            document.setOrder(order); // ‚úÖ Associe le document √† la commande

            pdfAdapter.export(document);
            order.getDocuments().add(document);
        }

        orderRepository.save(order); // ‚úÖ Sauvegarde en base avec les documents
        System.out.println("‚úÖ Tous les documents ont √©t√© g√©n√©r√©s et stock√©s en base pour la commande #" + orderId);
    }







    // ‚úÖ Confirmation d'une commande et g√©n√©ration des documents
    public Order confirmOrder(Long orderId) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Commande non trouv√©e"));

        if (!(order.getState() instanceof PendingState)) {
            throw new IllegalStateException("Seules les commandes en cours peuvent √™tre confirm√©es.");
        }

        // üî• Changer l'√©tat en "VALIDEE"
        order.setState(new ValidatedState());
        orderRepository.save(order);

        // ‚úÖ Ajouter un log avant la g√©n√©ration des documents
        System.out.println("D√©but de la g√©n√©ration des documents pour la commande #" + orderId);

        // üî• G√©n√©rer les documents maintenant
        generateOrderDocuments(order);

        orderNotifier.notifyObservers("Votre commande est maintenant VALIDEE.");
        
        // ‚úÖ Ajouter un log apr√®s la g√©n√©ration des documents
        System.out.println("‚úÖ Documents g√©n√©r√©s pour la commande #" + orderId);
        
        return order;
    }



    // ‚úÖ Changer l'√©tat d'une commande avec State Pattern
    public Order changeOrderStatus(Long orderId, boolean next) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Commande non trouv√©e"));
    
        String previousState = order.getState().getStatus();
    
        // ‚ùå Emp√™cher le retour en arri√®re si l'√©tat est "VALIDEE"
        if (!next && "VALIDEE".equals(order.getState().getStatus())) {
            throw new IllegalStateException("Impossible de revenir √† un √©tat pr√©c√©dent apr√®s validation !");
        }
    
        // ‚úÖ Changer d'√©tat
        if (next) {
            order.nextState();
        } else {
            order.previousState();
        }
    
        orderRepository.save(order);
    
        // ‚úÖ G√©n√©rer les documents uniquement si on passe √† "VALIDEE"
        if ("VALIDEE".equals(order.getState().getStatus()) && !"VALIDEE".equals(previousState)) {
            System.out.println("üìÑ G√©n√©ration des documents car la commande est VALIDEE !");
            generateOrderDocuments(order);
        }
    
        orderNotifier.notifyObservers("Votre commande est maintenant : " + order.getState().getStatus());
        return order;
    }
    
    

    // ‚úÖ R√©cup√©rer toutes les commandes
    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    // ‚úÖ Rechercher des commandes par client et/ou √©tat
    public List<Order> searchOrders(Long customerId, String state) {
        List<Order> orders;
        
        if (customerId != null) {
            orders = orderRepository.findByCustomerId(customerId);
        } else {
            orders = orderRepository.findAll();
        }
    
        // üî• Filtrage manuel sur l'√©tat car `state` est @Transient et non en base de donn√©es
        if (state != null) {
            orders = orders.stream()
                    .filter(o -> o.getState().getStatus().equalsIgnoreCase(state))
                    .toList();
        }
    
        return orders;
    }

    public Order changeLastOrderStatusForUser(User user, boolean next) {
        Customer customer = user.getCustomer();
        
        if (customer == null) {
            throw new IllegalStateException("Utilisateur sans client associ√© !");
        }

        // üî• R√©cup√©rer la derni√®re commande du client
        List<Order> orders = orderRepository.findByCustomerId(customer.getId());

        if (orders.isEmpty()) {
            throw new IllegalStateException("Aucune commande trouv√©e !");
        }

        // üèÜ Derni√®re commande
        Order lastOrder = orders.get(orders.size() - 1);

        // üî• Changer son √©tat
        return changeOrderStatus(lastOrder.getId(), next);
    }

    // ‚úÖ R√©cup√©rer toutes les commandes d'un client sp√©cifique
    public List<Order> getOrdersByCustomer(User user) {
        if (user.getCustomer() == null) {
            throw new IllegalStateException("Utilisateur sans client associ√© !");
        }

        return orderRepository.findByCustomerId(user.getCustomer().getId());
    }


}
